name: Build, Push & Sync Docker Hub

on:
  push:
    branches: [ "main" ]
  release:
    types: [ "published" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: rjsears/tftpgui

jobs:
  build-and-push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}   # e.g., rjsears or rjsears+robot
          password: ${{ secrets.DOCKERHUB_TOKEN }}      # Access Token for that same user/robot

      - name: Extract version from Git ref
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            VERSION="edge"
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.version }}
            ${{ env.IMAGE_NAME }}:latest

  sync-readme:
    name: Sync Docker Hub Overview
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Debug: confirm which Hub user your secrets authenticate as
      - name: Docker Hub whoami (debug)
        id: whoami
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          echo "Attempting Hub login as: $DH_USER"
          LOGIN_JSON=$(curl -s -H "Content-Type: application/json" \
            -d "{\"username\":\"$DH_USER\",\"password\":\"$DH_TOKEN\"}" \
            https://hub.docker.com/v2/users/login/)
          JWT=$(python3 - <<'PY'
import sys, json
try:
    print(json.load(sys.stdin).get("token",""))
except Exception:
    print("")
PY
<<<"$LOGIN_JSON")
          if [ -z "$JWT" ]; then
            echo "::error::Docker Hub login returned no token. Check DOCKERHUB_USERNAME/DOCKERHUB_TOKEN (must be a Docker Hub access token for that account)."
            exit 1
          fi
          echo "Hub user: $(curl -s -H "Authorization: JWT $JWT" https://hub.docker.com/v2/user/)"

      # Preferred: use the maintained action
      - name: Update Docker Hub description (action)
        id: hubdesc
        continue-on-error: true
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}     # MUST match token owner (user or robot)
          password: ${{ secrets.DOCKERHUB_TOKEN }}        # Docker Hub Access Token
          repository: ${{ env.IMAGE_NAME }}
          short-description: "Full-featured TFTP server (GUI & headless) with Docker support"
          readme-filepath: README.md

      # Fallback: do a direct API PATCH if the action failed (e.g., Forbidden)
      - name: Update Docker Hub Overview via API (fallback)
        if: steps.hubdesc.outcome != 'success'
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          REPO: ${{ env.IMAGE_NAME }}
        shell: bash
        run: |
          set -e
          JWT=$(curl -s -H "Content-Type: application/json" \
            -d "{\"username\":\"$DH_USER\",\"password\":\"$DH_TOKEN\"}" \
            https://hub.docker.com/v2/users/login/ \
            | python3 -c 'import sys,json; print(json.load(sys.stdin).get("token",""))')
          if [ -z "$JWT" ]; then
            echo "::error::Hub login failed in fallback step."
            exit 1
          fi
          BODY=$(python3 - <<'PY'
import io, json
with io.open("README.md","r",encoding="utf-8") as f:
    print(json.dumps({"full_description": f.read()}))
PY
)
          CODE=$(curl -s -o /tmp/hub_resp.json -w "%{http_code}" \
            -H "Authorization: JWT $JWT" \
            -H "Content-Type: application/json" \
            -X PATCH "https://hub.docker.com/v2/repositories/$REPO/" \
            -d "$BODY")
          echo "Hub PATCH HTTP $CODE"
          test "$CODE" = "200" || { echo "::error::Docker Hub returned HTTP $CODE"; cat /tmp/hub_resp.json; exit 1; }
